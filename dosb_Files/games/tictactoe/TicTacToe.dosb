    Area
arr mak L1 < 0 0 0 > 
arr mak L2 < 0 0 0 > 
arr mak L3 < 0 0 0 > 

    Current line 
put L1 r0 

    Players 
put 1 r-1
put 2 r-2 

    Current player 
put r-1 r-3

    Input as Index
put 0 r1


Setting the Board
---------------------------------------------------------
setOne ( put L1 r0 )
setTwo ( put L2 r0 )
setThree ( put L3 r0 )

setCurrentLine (
    com *Input inner_limits 1:3 goto setOne
    com *Input inner_limits 4:6 goto setTwo 
    com *Input inner_limits 7:9 goto setThree
)

printBoard (
    prt !L1 !L2 !L3 ::END ::SEP_LINE ::CLEAR 
)

resetBoard (
    arr mak L1 < 0 0 0 >
    arr mak L2 < 0 0 0 >
    arr mak L3 < 0 0 0 >

    com r-3 == 1 goto setP2 ?? setP1 
)

Setting and verifying the player-move
---------------------------------------------------------
setPosition (
    arr rep r0 r1 r-3
)

checkPosition (
    arr idx r0 r1 
    put acc r99 

    com r99 == 0 goto setPosition ?? getInput
)

Winning combinations
---------------------------------------------------------
won (
    prt r-3 has won the game \! ::END 
    goto resetBoard 
)
fl1_3 ( arr idx L1 3 com acc == r-3 goto won )
fl1_2 ( arr idx L1 2 com acc == r-3 goto fl1_3 )
fl1_1 ( arr idx L1 1 com acc == r-3 goto fl1_2 )
fl2_3 ( arr idx L2 3 com acc == r-3 goto won )
fl2_2 ( arr idx L2 2 com acc == r-3 goto fl2_3 )
fl2_1 ( arr idx L2 1 com acc == r-3 goto fl2_2 )
fl3_3 ( arr idx L3 3 com acc == r-3 goto won )
fl3_2 ( arr idx L3 2 com acc == r-3 goto fl3_3 )
fl3_1 ( arr idx L3 1 com acc == r-3 goto fl3_2 )

tl1_3 ( arr idx L3 1 com acc == r-3 goto won )
tl1_2 ( arr idx L2 1 com acc == r-3 goto tl1_3 )
tl1_1 ( arr idx L1 1 com acc == r-3 goto tl1_2 )
tl2_3 ( arr idx L3 2 com acc == r-3 goto won )
tl2_2 ( arr idx L2 2 com acc == r-3 goto tl2_3 )
tl2_1 ( arr idx L1 2 com acc == r-3 goto tl2_2 )
tl3_3 ( arr idx L3 3 com acc == r-3 goto won )
tl3_2 ( arr idx L2 3 com acc == r-3 goto tl3_3 )
tl3_1 ( arr idx L1 3 com acc == r-3 goto tl3_2 )

dl1_3 ( arr idx L3 3 com acc == r-3 goto won )
dl1_2 ( arr idx L2 2 com acc == r-3 goto dl1_3 )
dl1_1 ( arr idx L1 1 com acc == r-3 goto dl1_2 )
dl2_3 ( arr idx L3 1 com acc == r-3 goto won )
dl2_2 ( arr idx L2 2 com acc == r-3 goto dl2_3 )
dl2_1 ( arr idx L1 3 com acc == r-3 goto dl2_2 )

checkWin (
    goto fl1_1
    goto fl2_1 
    goto fl3_1 

    goto tl1_1
    goto tl2_1
    goto tl3_1

    goto dl1_1
    goto dl2_1
)


Setting the index
---------------------------------------------------------
setIndex1 ( put 1 r1 )
setIndex2 ( put 2 r1 )
setIndex3 ( put 3 r1 )

getIndex (
    goto setCurrentLine

    com *Input == 1 goto setIndex1
    com *Input == 2 goto setIndex2
    com *Input == 3 goto setIndex3
    com *Input == 4 goto setIndex1
    com *Input == 5 goto setIndex2
    com *Input == 6 goto setIndex3
    com *Input == 7 goto setIndex1
    com *Input == 8 goto setIndex2
    com *Input == 9 goto setIndex3

    goto checkPosition
)

Verifying the Input
---------------------------------------------------------
verifyInput (
    com *Input inner_limits 1:9 goto getIndex ?? getInput 
)

            Gets the user input 
            Saves play-history in stack
getInput (
    inp num 
    put acc stack point *Input

            Checking if the input is between higher than 0 and less than 10
    goto verifyInput
)

Changing player
---------------------------------------------------------
setP1 ( put r-1 r-3 )
setP2 ( put r-2 r-3 )
changePlayer (
    com r-3 == 1 goto setP2 ?? setP1
)


Main Loop
---------------------------------------------------------

:loop (
    prt Please enter a number \! ::END 
    goto getInput
    
    goto printBoard
    goto checkWin
    goto changePlayer

)
